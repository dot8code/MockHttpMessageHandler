name: CI/CD

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Package
        run: dotnet build -c Release

  test:
    name: Test NuGet Package
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Run Tests
        run: dotnet test

  deploy:
    name: Deploy NuGet Package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Get version
        id: package_version
        uses: KageKirin/get-csproj-version@v1.0.0
        with:
          file: src/FakeHttpMessageHandler/FakeHttpMessageHandler.csproj # Specify your .csproj file path
          
      - name: Build Package
        run: dotnet build -c Release

      - name: Pack NuGet Package
        run: dotnet pack -c Release --output ./artifacts /p:Version=${{ steps.package_version.outputs.version }}

      - name: Publish NuGet Package
        run: dotnet nuget push ./artifacts/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} 

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Get last commit message
        run: echo "::set-env name=LAST_COMMIT_MESSAGE::$(git log --format=%B -n 1)"

      - name: Create Release Branch
        run: |
          git checkout -b release/${{ steps.get_version.outputs.version }}

      - name: Add NuGet version tag
        run: |
          git tag -a ${{ steps.get_version.outputs.version }} -m "NuGet version: ${{ steps.get_version.outputs.version }}"

      - name: Push branch and tag
        run: |
          git push origin release/${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'prev') }}
          body: |
            Release for version ${{ steps.get_version.outputs.version }}
            ${{ env.LAST_COMMIT_MESSAGE }}
            
      - name: Upload NuGet package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/*.nupkg
          asset_name: MyPackage.nupkg
          asset_content_type: application/zip